package nl.amis.bth.model;

import nl.amis.bth.model.common.DocumentAccessViewRow;

import oracle.jbo.domain.BlobDomain;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun May 01 12:41:09 CEST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocumentAccessViewRowImpl extends ViewRowImpl implements DocumentAccessViewRow {

    public static final int ENTITY_BTHDOCUMENT = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ContentData,
        ContentType,
        Description,
        Id,
        MasterId,
        Name;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int CONTENTDATA = AttributesEnum.ContentData.index();
    public static final int CONTENTTYPE = AttributesEnum.ContentType.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int ID = AttributesEnum.Id.index();
    public static final int MASTERID = AttributesEnum.MasterId.index();
    public static final int NAME = AttributesEnum.Name.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DocumentAccessViewRowImpl() {
    }

    /**
     * Gets BthDocument entity object.
     * @return the BthDocument
     */
    public EntityImpl getBthDocument() {
        return (EntityImpl) getEntity(ENTITY_BTHDOCUMENT);
    }

    /**
     * Gets the attribute value for CONTENT_DATA using the alias name ContentData.
     * @return the CONTENT_DATA
     */
    public BlobDomain getContentData() {
        return (BlobDomain) getAttributeInternal(CONTENTDATA);
    }

    /**
     * Sets <code>value</code> as attribute value for CONTENT_DATA using the alias name ContentData.
     * @param value value to set the CONTENT_DATA
     */
    public void setContentData(BlobDomain value) {
        setAttributeInternal(CONTENTDATA, value);
    }

    /**
     * Gets the attribute value for CONTENT_TYPE using the alias name ContentType.
     * @return the CONTENT_TYPE
     */
    public String getContentType() {
        return (String) getAttributeInternal(CONTENTTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for CONTENT_TYPE using the alias name ContentType.
     * @param value value to set the CONTENT_TYPE
     */
    public void setContentType(String value) {
        setAttributeInternal(CONTENTTYPE, value);
    }

    /**
     * Gets the attribute value for DESCRIPTION using the alias name Description.
     * @return the DESCRIPTION
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for DESCRIPTION using the alias name Description.
     * @param value value to set the DESCRIPTION
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public Long getId() {
        return (Long) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name Id.
     * @param value value to set the ID
     */
    public void setId(Long value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for MASTER_ID using the alias name MasterId.
     * @return the MASTER_ID
     */
    public Long getMasterId() {
        return (Long) getAttributeInternal(MASTERID);
    }

    /**
     * Sets <code>value</code> as attribute value for MASTER_ID using the alias name MasterId.
     * @param value value to set the MASTER_ID
     */
    public void setMasterId(Long value) {
        setAttributeInternal(MASTERID, value);
    }

    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name Name.
     * @param value value to set the NAME
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }
}

