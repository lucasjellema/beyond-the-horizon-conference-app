package nl.amis.bth.model;

import java.sql.CallableStatement;
import java.sql.ResultSet;

import java.sql.SQLException;
import java.sql.Types;

import java.util.Date;

import nl.amis.bth.model.common.BthPlanningItemView;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.DBTransactionImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Apr 23 17:06:27 CEST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BthPlanningItemViewImpl extends ViewObjectImpl implements BthPlanningItemView {
    /**
     * This is the default constructor (do not remove).
     */
    public BthPlanningItemViewImpl() {
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

/* http://adfpractice-fedor.blogspot.nl/2013/01/working-with-plsql-procedures-in-adf-bc.html */
    
    // bth_planning_api.plan_session
// ( p_pim_id in number -- represents slot and room
//, p_ssn_id in number
// );
    public void execPlanSession(Integer pimId,
                                     Integer ssnId) {
        DBTransactionImpl dbti = (DBTransactionImpl)getDBTransaction();
        CallableStatement statement =
          dbti.createCallableStatement(("BEGIN "+"bth_planning_api.plan_session(?,?);" +
                                        "END;"), 0);
        try {
            statement.setInt(1, pimId);
            // to handle a null ssnId to wipe a session allocation -- http://stackoverflow.com/questions/14514589/jdbcinserting-null-to-integer-column
            if (ssnId == null) {
                statement.setNull(2, java.sql.Types.INTEGER);   
            } else {
            statement.setInt(2, ssnId);
            }
            statement.execute();
            return;
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException closeerr) {
                throw new JboException(closeerr);
            }
        }
    }//execPlanSession
}

