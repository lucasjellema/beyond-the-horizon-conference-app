create or replace
package body bth_summary_api
is


function json_summary
return clob
is
  l_json clob := to_clob('');
  l_first boolean;
  
begin

  l_json := '{';
  
  -- get all rooms:
  -- room_id, room_name, room_capacity
  l_json := l_json||' "rooms":  ['; 
  l_first:= true;
  
   for rom  in (  select rom.id, rom.display_label, rom.capacity
                  from   bth_rooms rom ) loop     
       l_json:=  l_json||case l_first when false then ', ' end|| '{'
       || ' "roomId": "'||rom.id||'"'
       || ', "roomLabel": "'||rom.display_label||'"'
       || ', "roomCapacity": "'||rom.capacity||'"'
       ||'}';
       l_first:= false;
   end loop; --rooms
   l_json := l_json||'] ';
-- get all slots
  -- slot id, slot display label, slot starttime slot endtime
  
  l_json := l_json||', "slots":  ['; 
  l_first:= true;
  
   for slt in (  select slt.id, slt.display_label, slt.start_time, slt.end_time, slt.round_sequence
                  from   bth_slots slt order by slt.start_time) loop     
       l_json:=  l_json||case l_first when false then ', ' end|| '{'
       || ' "slotId": "'||slt.id||'"'
       || ', "slotLabel": "'||slt.display_label||'"'
       || ', "slotStartTime": "'||to_char(slt.start_time,'DD-MM-YYYY HH24:MI')||'"'
       || ', "slotEndTime": "'||to_char(slt.end_time,'DD-MM-YYYY HH24:MI')||'"'
       ||'}';
       l_first:= false;
   end loop; --slots
   l_json := l_json||'] ';
  
  
  
  
  -- get all sessions
  l_json := l_json||', "sessions":  ['; 
  l_first:= true;
  for ssn in (  select distinct ssn.id
                from bth_sessions ssn
                where lower(ssn.status) = 'accepted' ) loop      

  -- and session details for each session
      l_json := l_json||case l_first when false then ', ' end||bth_sessions_api.get_session_json( p_session_id=> ssn.id);
      l_first:= false;
   end loop;
   l_json := l_json||'] ';

  l_json := l_json||', "speakers":  ['; 
  
  -- get all speakers
  -- add speaker details for each speaker
  l_first:= true;
  for skr in (  select distinct 
                       s.psn_id  
                from   bth_speakers s) loop      
  -- add speaker details for each speaker

      l_json := l_json||case l_first when false then ', ' end||bth_speakers_api.get_speaker_json( p_speaker_id=> skr.psn_id);
      l_first:= false;
   end loop;
   l_json := l_json||'] ';

  l_json := l_json||'} ';

  return l_json;
end json_summary;


end bth_summary_api;


