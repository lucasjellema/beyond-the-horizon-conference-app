create or replace
package body bth_planning_api
is


function find_next_pim
(p_pim_id in number)
return number
is
  l_next_pim_id number(10);
begin
select pim2.id next_pim_id
into   l_next_pim_id 
from   bth_planning_items pim
       join
       bth_slots slt
       on (pim.slt_id = slt.id)
       join bth_slots slt2
       on (slt2.round_sequence = slt.round_sequence + 1)
       join
       bth_planning_items pim2
       on (pim2.slt_id = slt2.id and pim2.rom_id = pim.rom_id)       
  where  pim.id = p_pim_id;
  return  l_next_pim_id;
exception
   when no_data_found
   then return null;          
end find_next_pim;


procedure plan_session
( p_pim_id in number -- represents slot and room
, p_ssn_id in number
) is
  l_session session_t;
  l_next_pim_id number(10);
  l_is_masterclass boolean := false;
  l_planning_item planning_t;
begin
  -- determine duration of the session
  -- if 2 (masterclass) then we need to update the pim_id specified and the next slot in the same room
  if p_ssn_id is not null
  then
    l_session:= bth_sessions_api.get_session
                ( p_session_id => p_ssn_id
                ); 
    l_is_masterclass := l_session.duration = 2;
  end if; 
  
  l_planning_item := get_planning_item
                     ( p_pim_id => p_pim_id
                     ) ;
  if l_planning_item.ssn_id is not null
  then
    -- remove all planning items for the session sitting in the planning item about to be wiped (and possibly for MCs in another planningitem as well)
    update bth_planning_items pim
    set    pim.ssn_id = null
    where  pim.ssn_id = l_planning_item.ssn_id;  
  end if;
  
  -- else (we ignore quickie for now) then regular processing.

  -- the simplest action: update pim and set ssn_id
  -- regardless of duration of session (could be Quickie or MC) , and of current contents of pim
  update bth_planning_items pim
  set    pim.ssn_id = case p_ssn_id when -1 then null else p_ssn_id end 
  where  pim.id = p_pim_id;

  -- and: remove ssn from other planning_items where it may currently sit
  
  update bth_planning_items pim
  set    pim.ssn_id = null
  where  pim.id != p_pim_id
  and    pim.ssn_id = p_ssn_id;  
  
  if l_is_masterclass
  then
    -- find next pim
     l_next_pim_id:= find_next_pim(p_pim_id => p_pim_id);
    -- associate next pim also with this session id 
    update bth_planning_items pim
    set    pim.ssn_id =  p_ssn_id  
    where  pim.id = l_next_pim_id;    
  end if;   --  l_is_masterclass
  
    
end plan_session;


function get_planning
( p_round in varchar2
, p_room in varchar2 
, p_day in varchar2
, p_time in varchar2
) return planning_tbl_t
is 
  l_planning_tbl planning_tbl_t:= planning_tbl_t();
begin
  select planning_t( rom.id, slt.id, rom.display_label, rom.capacity, rom.location_description, slt.display_label, slt.start_time, pim.ssn_id, ssn.title
  , (select LISTAGG(psn.first_name||' '||psn.last_name, ',') WITHIN GROUP (ORDER BY last_name) AS speakers
     from bth_people psn join bth_speakers skr on (skr.psn_id= psn.id) 
     where skr.ssn_id = ssn.id
    )
    , ssn.duration, tag.display_label
  )
  bulk collect into l_planning_tbl
  from   bth_planning_items pim
       join
       bth_rooms rom
       on (pim.rom_id = rom.id)
       join
       bth_slots slt
       on (pim.slt_id = slt.id)
       left outer join
       bth_sessions ssn
       on (pim.ssn_id = ssn.id)
       left outer join
       bth_tags tag
       on
       (ssn.track_tag_id = tag.id)
;

  return l_planning_tbl;
end get_planning;


function json_pln_tbl_summary
( p_plan_items in  planning_tbl_t
) return clob
is
  l_json clob := to_clob('');
begin
  if p_plan_items is not null and p_plan_items.count > 0
  then
    for i in p_plan_items.first .. p_plan_items.last loop
      l_json := l_json||', '||p_plan_items(i).to_json;
    end loop;
  end if;
  l_json := '{"planning": ['||ltrim(l_json,',')||'] }';
  return l_json;
end json_pln_tbl_summary;

function get_planning_item
( p_pim_id in number
) return planning_t
as
  l_planning planning_t;
begin
select planning_t( pim.id, ssn.title
          , (select LISTAGG(psn.first_name||' '||psn.last_name, ',') WITHIN GROUP (ORDER BY last_name) AS speakers
             from bth_people psn join bth_speakers skr on (skr.psn_id= psn.id) 
             where skr.ssn_id = ssn.id
            )
            , pim.slt_id
            , ssn.duration
            , tag.display_label
            , ssn.id
         ) 
  into l_planning
  from   bth_planning_items pim
       join
       bth_rooms rom
       on (pim.rom_id = rom.id)
       join
       bth_slots slt
       on (pim.slt_id = slt.id)
       left outer join
       bth_sessions ssn
       on (pim.ssn_id = ssn.id)
       left outer join
       bth_tags tag
       on
       (ssn.track_tag_id = tag.id)
  where pim.id = p_pim_id
  ;
  return l_planning;
  
end get_planning_item;  

end bth_planning_api;
